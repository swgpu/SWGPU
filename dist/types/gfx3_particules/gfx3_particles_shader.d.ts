export declare const SHADER_VERTEX_ATTR_COUNT = 15;
export declare const PIPELINE_DESC: any;
export declare const VERTEX_SHADER = "\nstruct VertexOutput {\n  @builtin(position) Position: vec4<f32>,\n  @location(0) FragUV: vec2<f32>,\n  @location(1) Color: vec4<f32>,\n  @location(2) Angle: f32\n};\n\n@group(0) @binding(0) var<uniform> V_MATRIX: mat4x4<f32>;\n@group(1) @binding(0) var<uniform> MVPC_MATRIX: mat4x4<f32>;\n\n@vertex\nfn main(\n  @location(0) Pos: vec3<f32>,\n  @location(1) Center: vec3<f32>,\n  @location(2) TexUV: vec2<f32>,\n  @location(3) Color: vec3<f32>,\n  @location(4) Size: f32,\n  @location(5) Opacity: f32,\n  @location(6) Angle: f32,\n  @location(7) Visible: f32\n) -> VertexOutput {\n  var output: VertexOutput;\n\n  if(Visible == 1)\n  {\n    output.Color = vec4(Color, Opacity);\n  }\n  else\n  {\n    output.Color = vec4(0.0, 0.0, 0.0, 0.0);\n  }\n\n  var right = vec3<f32>(V_MATRIX[0][0], V_MATRIX[1][0], V_MATRIX[2][0]);\n  var up = vec3<f32>(V_MATRIX[0][1], V_MATRIX[1][1], V_MATRIX[2][1]);\n\n  output.Position = MVPC_MATRIX * vec4<f32>(Center + (right * Pos.x * Size) + (up * Pos.y * Size), 1.0);\n  output.FragUV = TexUV;\n  output.Angle = Angle;\n  return output;\n}";
export declare const FRAGMENT_SHADER = "\nstruct FragOutput {\n  @location(0) Base: vec4f,\n  @location(1) Normal: vec4f,\n  @location(2) Id: vec4f\n}\n\n@group(1) @binding(1) var<uniform> ID: vec4<f32>;\n@group(2) @binding(0) var TEXTURE: texture_2d<f32>;\n@group(2) @binding(1) var SAMPLER: sampler;\n\n@fragment\nfn main(\n  @builtin(position) Position: vec4<f32>,\n  @location(0) FragUV: vec2<f32>,\n  @location(1) Color: vec4<f32>,\n  @location(2) Angle: f32\n) -> FragOutput {\n  var c = cos(Angle);\n  var s = sin(Angle);\n\n  var rotatedUV = vec2(\n    c * (FragUV.x - 0.5) + s * (FragUV.y - 0.5) + 0.5,\n    c * (FragUV.y - 0.5) - s * (FragUV.x - 0.5) + 0.5\n  );\n\n  var output: FragOutput;\n  output.Base = textureSample(TEXTURE, SAMPLER, rotatedUV) * Color;\n  output.Normal = vec4(0.0, 0.0, 0.0, 0.0);\n  output.Id = ID;\n  return output;\n}";
