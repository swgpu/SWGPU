export declare const SHADER_VERTEX_ATTR_COUNT = 6;
export declare const PIPELINE_DESC: any;
export declare const VERTEX_SHADER = "\nstruct VertexOutput {\n  @builtin(position) Position: vec4<f32>,\n  @location(0) ClipPos: vec4<f32>\n};\n\n@vertex\nfn main(\n  @location(0) Position: vec4<f32>,\n) -> VertexOutput {\n  var output : VertexOutput;\n  output.Position = Position;\n  output.Position.z = 1;\n  output.ClipPos = Position;\n  return output;\n}";
export declare const FRAGMENT_SHADER = "\nstruct FragOutput {\n  @location(0) Base: vec4f,\n  @location(1) Normal: vec4f,\n  @location(2) Id: vec4f\n};\n\n@group(0) @binding(0) var<uniform> VPC_INVERSE_MATRIX: mat4x4<f32>;\n@group(0) @binding(1) var<uniform> ID: vec4<f32>;\n@group(1) @binding(0) var CUBEMAP_TEXTURE: texture_cube<f32>;\n@group(1) @binding(1) var CUBEMAP_SAMPLER: sampler;\n\n@fragment\nfn main(\n  @builtin(position) Position: vec4<f32>,\n  @location(0) ClipPos: vec4<f32>\n) -> FragOutput {\n  var t = VPC_INVERSE_MATRIX * ClipPos;\n\n  var output: FragOutput;\n  output.Base = textureSample(CUBEMAP_TEXTURE, CUBEMAP_SAMPLER, normalize(t.xyz / t.w));\n  output.Normal = vec4(0.0, 0.0, 0.0, 0.0);\n  output.Id = ID;\n  return output;\n}";
